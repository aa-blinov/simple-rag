import logging
import os
import time
from datetime import datetime
from pathlib import Path

import chromadb
import pandas as pd
import streamlit as st
from chromadb.config import Settings as ChromaSettings
from dotenv import load_dotenv
from llama_index.core import StorageContext, VectorStoreIndex
from llama_index.embeddings.huggingface import HuggingFaceEmbedding
from llama_index.readers.file import DocxReader, PDFReader
from llama_index.vector_stores.chroma import ChromaVectorStore

from rag_system import LlamaIndexRAGSystem

load_dotenv()

logging.basicConfig(
    level=logging.DEBUG,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(),
        logging.FileHandler("rag_debug.log", encoding="utf-8"),  # –ó–∞–ø–∏—Å—å –≤ —Ñ–∞–π–ª
    ],
)
logger = logging.getLogger(__name__)


@st.cache_resource(show_spinner=False)
def get_chroma_client():
    store_path = os.getenv("STORE_PATH", "chroma_store")
    logger.debug(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è ChromaDB –∫–ª–∏–µ–Ω—Ç–∞ —Å –ø—É—Ç–µ–º: {store_path}")
    return chromadb.PersistentClient(
        path=store_path, settings=ChromaSettings(anonymized_telemetry=False)
    )


@st.cache_resource(show_spinner=False)
def get_embed_model():
    model_name = os.getenv("EMBED_MODEL_NAME", "Alibaba-NLP/gte-multilingual-base")
    device = os.getenv("EMBED_MODEL_DEVICE", "cpu")
    logger.debug(f"–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞: {model_name} –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ: {device}")
    return HuggingFaceEmbedding(
        model_name=model_name,
        device=device,
        trust_remote_code=os.getenv("EMBED_MODEL_TRUST_REMOTE_CODE", "True").lower()
        == "true",
    )


st.set_page_config(page_title="RAG Search", page_icon="üîç", layout="wide")


@st.cache_data(ttl=300)
def get_document_files():
    data_dir = Path(os.getenv("DATA_PATH", "data"))
    logger.debug(f"–ü–æ–∏—Å–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {data_dir}")

    if not data_dir.exists():
        logger.warning(f"–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è {data_dir} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return []

    pdf_files = list(data_dir.rglob("*.pdf"))
    docx_files = list(data_dir.rglob("*.docx"))
    doc_files = list(data_dir.rglob("*.doc"))

    all_files = sorted(pdf_files + docx_files + doc_files)
    logger.debug(
        f"–ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: PDF={len(pdf_files)}, DOCX={len(docx_files)}, DOC={len(doc_files)}"
    )

    return [str(f) for f in all_files]


@st.cache_data(ttl=300)
def get_indexed_files():
    try:
        client = get_chroma_client()
        try:
            col = client.get_collection("default")
            res = col.get(include=["metadatas"])
            metadatas = res.get("metadatas")
            if not metadatas:
                return []
            return list({m["source"] for m in metadatas if m and "source" in m})
        except Exception:
            return set()
    except Exception:
        return set()


def index_files(files):
    logger.info(f"–ù–∞—á–∞–ª–æ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ {len(files)} —Ñ–∞–π–ª–æ–≤")

    # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –∫–æ–Ω—Å–æ–ª—å –∏–∑ session_state
    if "console_logs" not in st.session_state:
        st.session_state.console_logs = []

    def add_console_log(message):
        st.session_state.console_logs.append(
            f"[{datetime.now().strftime('%H:%M:%S')}] {message}"
        )
        if len(st.session_state.console_logs) > 20:
            st.session_state.console_logs = st.session_state.console_logs[-20:]
        logger.debug(message)

    progress_container = st.container()

    with progress_container:
        st.info("üîÑ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è...")
        progress_bar = st.progress(0)
        status_text = st.empty()

    try:
        add_console_log("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞...")
        with st.spinner("–ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–∞..."):
            embed_model = get_embed_model()
        add_console_log("‚úÖ –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")

        docs = []
        pdf_reader = PDFReader()
        docx_reader = DocxReader()
        add_console_log("‚úÖ –†–∏–¥–µ—Ä—ã –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã")

        total_files = len(files)
        add_console_log(f"üìã –ù–∞—á–∏–Ω–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É {total_files} —Ñ–∞–π–ª–æ–≤...")

        for idx, f in enumerate(files):
            file_path = Path(f)
            file_ext = file_path.suffix.lower()
            current_progress = (idx / total_files) * 0.8  # 80% –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤

            progress_message = (
                f"üìÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞ {idx + 1}/{total_files}: {file_path.name}"
            )
            status_text.text(progress_message)
            add_console_log(progress_message)

            if file_ext == ".pdf":
                reader = pdf_reader
                file_type = "pdf"
            elif file_ext in [".docx", ".doc"]:
                reader = docx_reader
                file_type = "docx" if file_ext == ".docx" else "doc"
            else:
                skip_message = f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫ –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞: {file_path.name}"
                status_text.text(skip_message)
                add_console_log(skip_message)
                continue

            try:
                add_console_log(f"üîç –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ {file_path.name}...")
                file_docs = reader.load_data(file=file_path)

                for doc in file_docs:
                    doc.metadata = doc.metadata or {}
                    doc.metadata["source"] = str(f)
                    doc.metadata["file"] = str(f)
                    doc.metadata["filename"] = file_path.name
                    doc.metadata["file_type"] = file_type

                docs.extend(file_docs)
                success_message = (
                    f"‚úÖ –§–∞–π–ª {file_path.name}: –ø–æ–ª—É—á–µ–Ω–æ {len(file_docs)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤"
                )
                status_text.text(success_message)
                add_console_log(success_message)

            except Exception as e:
                error_message = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path.name}: {e}"
                status_text.text(error_message)
                add_console_log(error_message)
                st.error(error_message)
                logger.error(error_message, exc_info=True)
                time.sleep(2)
                continue

            progress_bar.progress(current_progress)

        add_console_log(f"üìä –í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ {len(docs)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        status_text.text("üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –≤–µ–∫—Ç–æ—Ä–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
        add_console_log("üíæ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")

        client = get_chroma_client()
        try:
            col = client.get_or_create_collection("default")
            add_console_log("‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è ChromaDB –≥–æ—Ç–æ–≤–∞")
        except Exception:
            col = client.create_collection("default")
            add_console_log("‚úÖ –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è ChromaDB")

        files_to_reindex = set(str(f) for f in files)
        add_console_log("üßπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏–µ—Å—è –¥–æ–∫—É–º–µ–Ω—Ç—ã...")

        try:
            existing_data = col.get(include=["metadatas"])
            metadatas = existing_data.get("metadatas")
            if metadatas:
                ids_to_delete = []
                for i, metadata in enumerate(metadatas):
                    if metadata and metadata.get("source") in files_to_reindex:
                        ids_to_delete.append(existing_data["ids"][i])

                if ids_to_delete:
                    col.delete(ids=ids_to_delete)
                    delete_message = f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ {len(ids_to_delete)} —Å—Ç–∞—Ä—ã—Ö —á–∞–Ω–∫–æ–≤ –¥–ª—è –ø–µ—Ä–µ–∏–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤"
                    add_console_log(delete_message)
                    logger.info(delete_message)
                    get_indexed_files.clear()
                else:
                    add_console_log("‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö—Å—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        except Exception as e:
            warning_msg = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ä—ã—Ö —á–∞–Ω–∫–æ–≤: {e}"
            add_console_log(warning_msg)
            logger.warning(warning_msg)

        missing_metadata = 0
        for i, doc in enumerate(docs):
            if "source" not in doc.metadata:
                missing_metadata += 1
                doc.metadata["source"] = f"–î–æ–∫—É–º–µ–Ω—Ç #{i}"

        if missing_metadata > 0:
            warning_message = f"‚ö†Ô∏è {missing_metadata} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –Ω–µ –∏–º–µ–ª–∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö 'source', –ø—Ä–æ–±–ª–µ–º–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞!"
            st.warning(warning_message)
            add_console_log(warning_message)

        store = ChromaVectorStore(chroma_collection=col)
        ctx = StorageContext.from_defaults(vector_store=store)

        progress_bar.progress(0.9)
        embedding_message = "üß† –°–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω—ã—Ö —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—è..."
        status_text.text(embedding_message)
        add_console_log(embedding_message)

        VectorStoreIndex.from_documents(
            docs, storage_context=ctx, embed_model=embed_model
        )

        progress_bar.progress(1.0)
        final_message = f"üéâ –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {len(files)} —Ñ–∞–π–ª–æ–≤, –≤—Å–µ–≥–æ {len(docs)} —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤"
        st.success(final_message)
        add_console_log(final_message)
        logger.info(final_message)

        get_indexed_files.clear()

    except Exception as e:
        error_message = f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {e}"
        st.error(error_message)
        add_console_log(error_message)
        logger.error(error_message, exc_info=True)

    st.session_state.indexing = False
    add_console_log("üèÅ –ü—Ä–æ—Ü–µ—Å—Å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω")


def clear_index():
    logger.info("–ù–∞—á–∞–ª–æ –æ—á–∏—Å—Ç–∫–∏ –∏–Ω–¥–µ–∫—Å–∞")

    if "console_logs" not in st.session_state:
        st.session_state.console_logs = []

    def add_console_log(message):
        st.session_state.console_logs.append(
            f"[{datetime.now().strftime('%H:%M:%S')}] {message}"
        )
        if len(st.session_state.console_logs) > 20:
            st.session_state.console_logs = st.session_state.console_logs[-20:]
        logger.debug(message)

    add_console_log("üóëÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –∏–Ω–¥–µ–∫—Å–∞...")

    clear_container = st.container()
    with clear_container:
        with st.spinner("–û—á–∏—Å—Ç–∫–∞ –∏–Ω–¥–µ–∫—Å–∞..."):
            try:
                client = get_chroma_client()
                client.delete_collection("default")
                success_msg = "–ò–Ω–¥–µ–∫—Å –æ—á–∏—â–µ–Ω"
                st.success(success_msg)
                add_console_log("‚úÖ " + success_msg)
                logger.info(success_msg)
            except Exception as e:
                info_msg = f"–ò–Ω–¥–µ–∫—Å —É–∂–µ –ø—É—Å—Ç –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"
                st.info(info_msg)
                add_console_log("‚ÑπÔ∏è " + info_msg)
                logger.warning(info_msg)

            get_indexed_files.clear()
            add_console_log("üîÑ –ö—ç—à –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ—á–∏—â–µ–Ω")
            logger.debug("–ö—ç—à –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ—á–∏—â–µ–Ω")

            if "rag" in st.session_state:
                st.session_state.rag = None
                add_console_log("üîÑ RAG —Å–∏—Å—Ç–µ–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
                logger.debug("RAG —Å–∏—Å—Ç–µ–º–∞ —Å–±—Ä–æ—à–µ–Ω–∞")

        st.rerun()


def main():
    logger.debug("–ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

    for key, default_value in {
        "screen": "index",
        "messages": [],
        "indexing": False,
        "rag": None,
        "last_pdf_count": 0,
        "last_indexed_count": 0,
    }.items():
        if key not in st.session_state:
            st.session_state[key] = default_value

    docs = [Path(p) for p in get_document_files()]
    indexed = get_indexed_files()

    logger.debug(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤={len(docs)}, –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ={len(indexed)}")

    st.sidebar.title("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
    st.sidebar.metric(
        "–î–æ–∫—É–º–µ–Ω—Ç–æ–≤",
        len(docs),
        delta=len(docs) - st.session_state.last_pdf_count
        if st.session_state.last_pdf_count > 0
        else None,
    )
    st.sidebar.metric(
        "–ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ",
        len(indexed),
        delta=len(indexed) - st.session_state.last_indexed_count
        if st.session_state.last_indexed_count > 0
        else None,
    )
    st.sidebar.metric("–ß–∞—Ç-—Å–æ–æ–±—â–µ–Ω–∏–π", len(st.session_state.messages))

    st.session_state.last_pdf_count = len(docs)
    st.session_state.last_indexed_count = len(indexed)

    tab1, tab2 = st.tabs(["üìö –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤", "üí¨ –ß–∞—Ç –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º"])

    with tab1:
        st.header("üìö –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤")
        if st.session_state.indexing:
            st.info("üîÑ –ò–¥—ë—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.")
            return

        if not docs:
            st.warning("–ù–µ—Ç PDF, DOC –∏–ª–∏ DOCX —Ñ–∞–π–ª–æ–≤ –≤ –ø–∞–ø–∫–µ data/")
            return

        if "selected_files" not in st.session_state:
            st.session_state.selected_files = []

        data_dir = Path(os.getenv("DATA_PATH", "data"))

        from st_aggrid import AgGrid, GridOptionsBuilder, GridUpdateMode

        st.subheader("–í—ã–±–æ—Ä —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏")
        records = []
        for f in docs:
            file_type = f.suffix.lower()
            icon = "üìÑ"
            if file_type == ".pdf":
                icon = "üìï"
            elif file_type in [".doc", ".docx"]:
                icon = "üìò"
            try:
                relp = f.relative_to(data_dir)
                dirp = str(relp.parent) if str(relp.parent) != "." else ""
            except Exception:
                dirp = str(f.parent)
            records.append(
                {
                    "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è": dirp,
                    "–ò–º—è —Ñ–∞–π–ª–∞": f"{icon} {f.stem}",
                    "–¢–∏–ø": file_type[1:].upper(),
                    "–ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ": str(f) in indexed,
                }
            )
        df_grid = pd.DataFrame(records)

        gb = GridOptionsBuilder.from_dataframe(df_grid)

        gb.configure_column("file", hide=True)
        gb.configure_column("indexed", headerName="–ü—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–æ")
        gb.configure_selection(selection_mode="multiple", use_checkbox=True)
        grid_options = gb.build()
        grid_response = AgGrid(
            df_grid,
            gridOptions=grid_options,
            update_mode=GridUpdateMode.SELECTION_CHANGED,
            enable_enterprise_modules=False,
        )
        # Safely handle no selection (None) case
        raw_selection = grid_response.get("selected_rows")
        if raw_selection is None:
            selected = []
        elif isinstance(raw_selection, pd.DataFrame):
            selected = raw_selection.to_dict(orient="records")
        else:
            selected = raw_selection
        st.session_state.selected_files = [row["file"] for row in selected]
        st.info(
            f"–í—ã–±—Ä–∞–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏: {len(st.session_state.selected_files)}"
        )

        st.markdown("---")
        col1, col2 = st.columns(2)
        with col1:
            if st.button(
                "üì• –ò–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –≤—ã–±—Ä–∞–Ω–Ω—ã–µ",
                disabled=not st.session_state.selected_files
                or st.session_state.indexing,
            ):
                st.session_state.indexing = True
                index_files(st.session_state.selected_files)
        with col2:
            if st.button("üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –∏–Ω–¥–µ–∫—Å"):
                clear_index()

        # –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–æ–Ω—Å–æ–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥ —Ç–∞–±–ª–∏—Ü–µ–π (–≤—Å–µ–≥–¥–∞ –æ—Ç–∫—Ä—ã—Ç–∞)
        st.markdown("---")
        st.subheader("üìä –ö–æ–Ω—Å–æ–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏, –µ—Å–ª–∏ –∏—Ö –µ—â–µ –Ω–µ—Ç
        if "console_logs" not in st.session_state:
            st.session_state.console_logs = [
                f"[{datetime.now().strftime('%H:%M:%S')}] üöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ"
            ]

        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–æ–Ω—Å–æ–ª–∏
        console_container = st.container()

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–æ–Ω—Å–æ–ª—å
        with console_container:
            if st.session_state.console_logs:
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 15 –∑–∞–ø–∏—Å–µ–π
                console_text = "\n".join(st.session_state.console_logs[-15:])
                st.code(console_text, language="text")

        # –ö–Ω–æ–ø–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –ª–æ–≥–æ–≤
        if st.button("üßπ –û—á–∏—Å—Ç–∏—Ç—å –ª–æ–≥–∏", help="–û—á–∏—Å—Ç–∏—Ç—å –∫–æ–Ω—Å–æ–ª—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"):
            st.session_state.console_logs = [
                f"[{datetime.now().strftime('%H:%M:%S')}] üßπ –õ–æ–≥–∏ –æ—á–∏—â–µ–Ω—ã"
            ]
            st.rerun()

    with tab2:
        logger.debug("–û—Ç–∫—Ä—ã—Ç —ç–∫—Ä–∞–Ω —á–∞—Ç–∞")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã
        if len(indexed) == 0:
            st.warning(
                "üìù –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å —á–∞—Ç–æ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∏–Ω–¥–µ–∫—Å–∏—Ä–æ–≤–∞—Ç—å –¥–æ–∫—É–º–µ–Ω—Ç—ã"
            )
            st.info(
                "üëà –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –≤–∫–ª–∞–¥–∫—É **'üìö –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤'** –∏ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∏–Ω–¥–µ–∫—Å–∞—Ü–∏–∏"
            )
            return

        if not st.session_state.rag:
            logger.debug("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG —Å–∏—Å—Ç–µ–º—ã")
            init_container = st.container()
            with init_container:
                with st.spinner("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –≤–æ–ø—Ä–æ—Å–æ–≤-–æ—Ç–≤–µ—Ç–æ–≤..."):
                    try:
                        embed_model = get_embed_model()

                        rag = LlamaIndexRAGSystem(embed_model=embed_model)
                        rag.create_index()
                        rag.setup_query_engine()
                        st.session_state.rag = rag
                        logger.info("RAG —Å–∏—Å—Ç–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
                    except Exception as e:
                        error_msg = f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}"
                        st.error(error_msg)
                        logger.error(error_msg, exc_info=True)
                        return
        st.markdown("---")
        for m in st.session_state.messages:
            with st.chat_message(m["role"]):
                st.markdown(m["content"])
                if m["role"] == "assistant" and m.get("sources"):
                    with st.expander(f"üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(m['sources'])})"):
                        for i, s in enumerate(m["sources"], 1):
                            st.markdown(f"**{i}. {Path(s['file']).name}**  ")
                            score = s["score"]
                            if score >= 0.8:
                                score_color = "green"
                                rating = "–æ—Ç–ª–∏—á–Ω–∞—è"
                            elif score >= 0.6:
                                score_color = "blue"
                                rating = "—Ö–æ—Ä–æ—à–∞—è"
                            elif score >= 0.4:
                                score_color = "orange"
                                rating = "—Å—Ä–µ–¥–Ω—è—è"
                            else:
                                score_color = "red"
                                rating = "–Ω–∏–∑–∫–∞—è"

                            st.markdown(
                                f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: :{score_color}[**{rating}**] (`{score:.3f}`)  "
                            )
                            st.markdown("**–§—Ä–∞–≥–º–µ–Ω—Ç:**")
                            st.markdown(f"*{s['content']}*")
                            st.divider()
        if q := st.chat_input("–í–∞—à –≤–æ–ø—Ä–æ—Å –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º..."):
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –≤–æ–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {q}")
            st.session_state.messages.append({"role": "user", "content": q})
            with st.chat_message("user"):
                st.markdown(q)
            with st.chat_message("assistant"):
                with st.spinner("–ü–æ–∏—Å–∫ –æ—Ç–≤–µ—Ç–∞..."):
                    try:
                        logger.debug("–ù–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ —á–µ—Ä–µ–∑ RAG —Å–∏—Å—Ç–µ–º—É")
                        res = st.session_state.rag.query(q)
                        logger.debug(
                            f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤: {len(res.get('sources', []))}"
                        )

                        st.markdown(res["answer"])
                        if res["sources"]:
                            with st.expander(f"üìö –ò—Å—Ç–æ—á–Ω–∏–∫–∏ ({len(res['sources'])})"):
                                for i, s in enumerate(res["sources"], 1):
                                    st.markdown(f"**{i}. {Path(s['file']).name}**  ")
                                    score = s["score"]
                                    if score >= 0.8:
                                        score_color = "green"
                                        rating = "–æ—Ç–ª–∏—á–Ω–∞—è"
                                    elif score >= 0.6:
                                        score_color = "blue"
                                        rating = "—Ö–æ—Ä–æ—à–∞—è"
                                    elif score >= 0.4:
                                        score_color = "orange"
                                        rating = "—Å—Ä–µ–¥–Ω—è—è"
                                    else:
                                        score_color = "red"
                                        rating = "–Ω–∏–∑–∫–∞—è"

                                    st.markdown(
                                        f"–†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: :{score_color}[**{rating}**] (`{score:.3f}`)  "
                                    )
                                    st.markdown("**–§—Ä–∞–≥–º–µ–Ω—Ç:**")
                                    st.markdown(f"*{s['content']}*")
                                    st.divider()
                        st.session_state.messages.append(
                            {
                                "role": "assistant",
                                "content": res["answer"],
                                "sources": res["sources"],
                            }
                        )
                        logger.info(
                            "–û—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞"
                        )
                    except Exception as e:
                        error_msg = f"–û—à–∏–±–∫–∞: {e}"
                        st.error(error_msg)
                        logger.error(
                            f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞: {e}", exc_info=True
                        )


if __name__ == "__main__":
    main()
